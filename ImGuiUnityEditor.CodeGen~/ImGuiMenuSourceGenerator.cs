using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ImGuiUnityEditor.CodeGen
{
    /// <summary>
    /// Source generator that creates Unity menu items for classes decorated with ImGuiMenuAttribute
    /// </summary>
    [Generator]
    public class ImGuiMenuSourceGenerator : ISourceGenerator
    {
        private static readonly DiagnosticDescriptor InvalidImGuiMenuAttributeUsage = new DiagnosticDescriptor(
            id: "IMGUI001",
            title: "Invalid ImGuiMenuAttribute usage",
            messageFormat: "Class '{0}' is marked with ImGuiMenuAttribute but does not implement IImGuiObject interface",
            category: "ImGuiUnityEditor",
            DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "Classes with ImGuiMenuAttribute must implement IImGuiObject interface.");

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ImGuiMenuAttributeSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver is not ImGuiMenuAttributeSyntaxReceiver receiver ||
                !receiver.CandidateClasses.Any())
            {
                return;
            }

            var validClasses = new List<ClassDeclarationSyntax>();

            // Validate all candidate classes
            foreach (var classDecl in receiver.CandidateClasses)
            {
                var semanticModel = context.Compilation.GetSemanticModel(classDecl.SyntaxTree);
                var classSymbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

                if (classSymbol == null)
                {
                    continue;
                }

                // Check if class implements IImGuiObject interface
                if (!ImplementsInterface(classSymbol, "ImGuiUnityEditor.IImGuiObject"))
                {
                    // Report diagnostic error
                    var diagnostic = Diagnostic.Create(
                        InvalidImGuiMenuAttributeUsage,
                        classDecl.Identifier.GetLocation(),
                        classSymbol.Name);

                    context.ReportDiagnostic(diagnostic);
                }
                else
                {
                    validClasses.Add(classDecl);
                }
            }

            if (!validClasses.Any())
            {
                return;
            }

            var menuItemsCode = GenerateMenuItemsCode(context, validClasses);
            context.AddSource("ImGuiMenuItems.g.cs", SourceText.From(menuItemsCode, Encoding.UTF8));
        }

        private string GenerateMenuItemsCode(
            GeneratorExecutionContext context,
            IReadOnlyList<ClassDeclarationSyntax> candidateClasses)
        {
            var codeBuilder = new StringBuilder();

            // File header
            codeBuilder.AppendLine("// <auto-generated/>");
            codeBuilder.AppendLine("using UnityEditor;");
            codeBuilder.AppendLine("using UnityEngine;");
            codeBuilder.AppendLine("using ImGuiUnityEditor;");
            codeBuilder.AppendLine();
            codeBuilder.AppendLine("namespace Generated");
            codeBuilder.AppendLine("{");
            codeBuilder.AppendLine("    public static class ImGuiMenuItems");
            codeBuilder.AppendLine("    {");

            // Process classes and generate methods
            foreach (var classDecl in candidateClasses)
            {
                var menuMethodCode = GenerateMenuItemMethodForClass(context, classDecl);
                if (!string.IsNullOrEmpty(menuMethodCode))
                {
                    codeBuilder.AppendLine(menuMethodCode);
                }
            }

            // Close the class and namespace
            codeBuilder.AppendLine("    }");
            codeBuilder.AppendLine("}");

            return codeBuilder.ToString();
        }

        private string GenerateMenuItemMethodForClass(GeneratorExecutionContext context, ClassDeclarationSyntax classDecl)
        {
            var semanticModel = context.Compilation.GetSemanticModel(classDecl.SyntaxTree);
            var classSymbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

            if (classSymbol == null)
            {
                return null;
            }

            var menuAttributeData = GetMenuAttributeData(classSymbol);
            if (menuAttributeData == null)
            {
                return null;
            }

            return GenerateMenuItemMethod(
                className: classSymbol.Name,
                fullTypeName: classSymbol.ToDisplayString(),
                menuPath: menuAttributeData.MenuPath,
                priority: menuAttributeData.Priority,
                shortcut: menuAttributeData.Shortcut,
                isEditorWindow: InheritsFrom(classSymbol, "ImGuiUnityEditor.ImGuiEditorWindow"));
        }

        private MenuAttributeData GetMenuAttributeData(INamedTypeSymbol classSymbol)
        {
            var menuAttribute = classSymbol.GetAttributes()
                .FirstOrDefault(a => a.AttributeClass?.Name == "ImGuiMenuAttribute" &&
                                    a.AttributeClass?.ContainingNamespace?.ToDisplayString() == "ImGuiUnityEditor");

            if (menuAttribute == null)
            {
                return null;
            }

            string menuPath = ExtractMenuPath(menuAttribute);
            if (string.IsNullOrEmpty(menuPath))
            {
                return null;
            }

            return new MenuAttributeData
            {
                MenuPath = menuPath,
                Priority = ExtractPriority(menuAttribute),
                Shortcut = ExtractShortcut(menuAttribute)
            };
        }

        private string ExtractMenuPath(AttributeData attribute)
        {
            // Try constructor argument first
            if (attribute.ConstructorArguments.Length > 0 && attribute.ConstructorArguments[0].Value != null)
            {
                return attribute.ConstructorArguments[0].Value.ToString();
            }

            // Then try named argument
            var namedArg = attribute.NamedArguments.FirstOrDefault(na => na.Key == "ItemName");
            if (!namedArg.Equals(default) && namedArg.Value.Value != null)
            {
                return namedArg.Value.Value.ToString();
            }

            return null;
        }

        private int ExtractPriority(AttributeData attribute)
        {
            if (attribute.ConstructorArguments.Length > 1 && attribute.ConstructorArguments[1].Value != null)
            {
                return (int)attribute.ConstructorArguments[1].Value;
            }

            var namedArg = attribute.NamedArguments.FirstOrDefault(na => na.Key == "Priority");
            if (!namedArg.Equals(default) && namedArg.Value.Value != null)
            {
                return (int)namedArg.Value.Value;
            }

            return 100;
        }

        private string ExtractShortcut(AttributeData attribute)
        {
            if (attribute.ConstructorArguments.Length > 2 && attribute.ConstructorArguments[2].Value != null)
            {
                return attribute.ConstructorArguments[2].Value.ToString();
            }

            var namedArg = attribute.NamedArguments.FirstOrDefault(na => na.Key == "Shortcut");
            if (!namedArg.Equals(default) && namedArg.Value.Value != null)
            {
                return namedArg.Value.Value.ToString();
            }

            return string.Empty;
        }

        private bool InheritsFrom(INamedTypeSymbol type, string baseTypeName)
        {
            var baseType = type.BaseType;
            while (baseType != null)
            {
                if (baseType.ToDisplayString() == baseTypeName)
                {
                    return true;
                }
                baseType = baseType.BaseType;
            }
            return false;
        }

        private bool ImplementsInterface(INamedTypeSymbol type, string interfaceName)
        {
            // Check if the type directly implements the interface
            foreach (var @interface in type.Interfaces)
            {
                if (@interface.ToDisplayString() == interfaceName)
                {
                    return true;
                }
            }

            // Check if any base type implements the interface
            var baseType = type.BaseType;
            while (baseType != null)
            {
                foreach (var @interface in baseType.Interfaces)
                {
                    if (@interface.ToDisplayString() == interfaceName)
                    {
                        return true;
                    }
                }
                baseType = baseType.BaseType;
            }

            return false;
        }

        private string GenerateMenuItemMethod(
            string className,
            string fullTypeName,
            string menuPath,
            int priority,
            string shortcut,
            bool isEditorWindow)
        {
            string fullMenuPath = string.IsNullOrEmpty(shortcut) ? menuPath : $"{menuPath} {shortcut}";
            string methodName = isEditorWindow ? $"Open{className}" : $"Toggle{className}";
            string actionMethod = isEditorWindow ? "Open" : "Toggle";

            return $@"        [MenuItem(""{fullMenuPath}"", false, {priority})]
        public static void {methodName}()
        {{
            ImGuiUnityEditorManager.{actionMethod}<{fullTypeName}>();
        }}";
        }

        /// <summary>
        /// Data structure to hold the extracted attribute information
        /// </summary>
        private class MenuAttributeData
        {
            public string MenuPath { get; set; }
            public int Priority { get; set; }
            public string Shortcut { get; set; }
        }
    }
}

